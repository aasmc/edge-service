server:
  port: 9000
  netty:
    connection-timeout: 2s
    # how long to wait before closing a TCP connection if no data is transferred
    idle-timeout: 15s
  shutdown: graceful

spring:
  application:
    name: edge-service
  lifecycle:
    timeout-per-shutdown-phase: 15s
  cloud:
    gateway:
      httpclient:
        connect-timeout: 2000 # Time limit for a connection to downstream service to be established (ms)
        response-timeout: 5s
        # By default the Netty HTTP client is configured with elastic connection pool, that increases
        # the number of concurrent connections as the workload increases. We can configure it manually
        pool:
          # Type of connection pool: elastic, fixed, disabled
          type: elastic
          # Idle time after which the communication channel will be closed
          max-idle-time: 15s
          # Time after which the communication channel will be closed
          max-life-time: 60s
      routes:
        - id: catalog-route
          # The URI value comes from an env variable, or else from the default
          uri: ${CATALOG_SERVICE_URL:http://localhost:9001}/books
          predicates:
            - Path=/books/**
          filters:
            - name: CircuitBreaker
              args:
                name: catalogCircuitBreaker
                fallbackUri: forward:/catalog-fallback
        - id: order-route
          uri: ${ORDER_SERVICE_URL:http://localhost:9002}/orders
          predicates:
            - Path=/orders/**
          filters:
            - name: CircuitBreaker
              args:
                name: orderCircuitBreaker
      default-filters:
        - name: Retry
          args:
            retries: 3
            methods: GET
            series: SERVER_ERROR # Retry only when 5XX errors
            exceptions: java.io.IOException, java.util.concurrent.TimeoutException
            backoff:
              # Retries with a delay computed as "firstBackoff * (factor ^ n)"
              firstBackoff: 50ms
              maxBackOff: 500ms
              factor: 2
              basedOnPreviousValue: false

  redis:
    connect-timeout: 2s
    host: localhost
    port: 6379
    timeout: 1s

resilience4j:
  circuitbreaker:
    configs:
      default:
        # When at least 50% of the calls in the window have produced an error, the circuit
        # will trip to open state
        sliding-window-size: 20
        permitted-number-of-calls-in-half-open-state: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state: 15000 # Wait time before moving from open to half-open state (ms)
  timelimiter:
    configs:
      default:
        timeout-duration: 5s

logging:
  level:
    io.github.resilience4j: DEBUG